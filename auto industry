--[[
    Script Combinado Final: Compras + Auto Industry Inteligente v4

    Objetivo: Executar uma sequência completa de ações:
    1. Comprar recursos específicos de nações definidas.
    2. Detectar fábricas existentes na nação do jogador.
    3. Construir APENAS as fábricas que faltam para atingir as metas,
       em cidades aleatórias.

    Metas de Fábricas: 2 Eletro, 1 Aço, 1 Motor, 1 Fert, 3 Civil.

    AVISO: Riscos de banimento associados à automação. Use com cautela.
]]

print("[Combo Final v4] Iniciando...")

--[[----------------------------------------------------------
    CONFIGURAÇÕES E SETUP ROBUSTO
-------------------------------------------------------------]]
local DELAY_ENTRE_ACOES = 1.5 -- Delay entre compras e construções individuais
local setupOk = true -- Flag para verificar se o setup foi bem-sucedido

-- Serviços (com pcall para segurança)
local Workspace, Players, ReplicatedStorage, RunService
local localPlayer, GameManager, WorldContainer, CitiesFolder
local ManageAllianceRemote, CreateBuildingRemote -- Remotes para compra e construção

local function tryGetService(serviceName)
    local success, service = pcall(game.GetService, game, serviceName)
    if success and service then print(string.format("[Setup] GetService('%s') OK.", serviceName)) return service
    else warn(string.format("[Setup] FALHA GetService('%s'): %s", serviceName, tostring(service))) setupOk = false return nil end
end

Workspace = tryGetService("Workspace")
Players = tryGetService("Players")
ReplicatedStorage = tryGetService("ReplicatedStorage")
RunService = tryGetService("RunService")

if RunService and not RunService:IsClient() then warn("[Setup] ERRO: Script não está rodando no cliente.") setupOk = false end

if Players then
    local success, player = pcall(function() return Players.LocalPlayer end)
    if success and player then localPlayer = player; print("[Setup] LocalPlayer OK:", localPlayer.Name) else warn("[Setup] Falha ao obter LocalPlayer:", tostring(player)) setupOk = false end
else setupOk = false end

if Workspace then
    local successWC, container = pcall(function() return Workspace:FindFirstChild("Baseplate") or Workspace:FindFirstChild("Map") or Workspace end)
    if successWC and container then WorldContainer = container; print(string.format("[Setup] WorldContainer encontrado: %s.", WorldContainer.Name))
        local successCF, folder = pcall(function() return WorldContainer:FindFirstChild("Cities", 10) end)
        if successCF and folder then CitiesFolder = folder; print("[Setup] Pasta 'Cities' encontrada.") elseif successCF then warn("[Setup] Pasta 'Cities' NÃO encontrada.") setupOk = false else warn("[Setup] Erro ao procurar 'Cities':", tostring(folder)) setupOk = false end
    else warn("[Setup] Falha ao encontrar WorldContainer:", tostring(container)) setupOk = false end
else setupOk = false end

if Workspace then
    local successGM, gm = pcall(Workspace.WaitForChild, Workspace, "GameManager", 20)
    if successGM and gm then GameManager = gm; print("[Setup] GameManager OK.")
        local successMAR, mar = pcall(GameManager.WaitForChild, GameManager, "ManageAlliance", 15)
        if successMAR and mar then ManageAllianceRemote = mar; print("[Setup] ManageAllianceRemote OK.") else warn("[Setup] FALHA ao encontrar ManageAllianceRemote:", tostring(mar)) setupOk = false end
        local successCBR, cbr = pcall(GameManager.WaitForChild, GameManager, "CreateBuilding", 15)
        if successCBR and cbr then CreateBuildingRemote = cbr; print("[Setup] CreateBuildingRemote OK.") else warn("[Setup] FALHA ao encontrar CreateBuildingRemote:", tostring(cbr)) setupOk = false end
    else warn("[Setup] FALHA ao encontrar GameManager:", tostring(gm)) setupOk = false end
else setupOk = false end

if not setupOk then
    warn("[Combo Final v4] Setup inicial falhou devido aos erros acima. Script interrompido.")
    return
end
print("[Combo Final v4] Setup inicial concluído com sucesso.")

--[[----------------------------------------------------------
    FUNÇÃO AUXILIAR (Executa Ação Genérica)
-------------------------------------------------------------]]
local function executarAcao(remoteEvent, arguments, delayTime)
    if not remoteEvent then warn("RemoteEvent inválido na ação.") return false end
    local success, err = pcall(function() remoteEvent:FireServer(unpack(arguments)) end)
    if not success then warn(string.format("Erro na ação %s: %s", remoteEvent.Name, tostring(err))) end
    task.wait(delayTime or DELAY_ENTRE_ACOES)
    return success
end

--[[----------------------------------------------------------
    SEÇÃO 1: COMPRAS ESPECÍFICAS DE RECURSOS
-------------------------------------------------------------]]
print("[Combo Final v4] Iniciando compras específicas...")
local comprasEspecificas = {
    { nation = "Algeria", resource = "Iron", quantity = 4, price = 1 }, { nation = "Liberia", resource = "Iron", quantity = 4, price = 1 },
    { nation = "Zambia", resource = "Copper", quantity = 4, price = 1 }, { nation = "Zimbabwe", resource = "Gold", quantity = 4, price = 1 },
    { nation = "Australia", resource = "Titanium", quantity = 4, price = 1 }, { nation = "Senegal", resource = "Titanium", quantity = 4, price = 1 },
    { nation = "Vietnam", resource = "Tungsten", quantity = 3, price = 1 }, { nation = "Bolivia", resource = "Tungsten", quantity = 3, price = 1 },
    { nation = "Iraq", resource = "Phosphate", quantity = 4, price = 1 }, { nation = "Senegal", resource = "Phosphate", quantity = 4, price = 1 },
}
local comprasTentadas = 0
for _, compraInfo in ipairs(comprasEspecificas) do
    local args = {compraInfo.nation,"ResourceTrade",{compraInfo.resource,"Buy",compraInfo.quantity,compraInfo.price,"Trade"}}
    print(string.format("  -> Comprando %d %s de %s...", compraInfo.quantity, compraInfo.resource, compraInfo.nation))
    if executarAcao(ManageAllianceRemote, args) then comprasTentadas = comprasTentadas + 1 end
end
print(string.format("[Combo Final v4] Compras específicas concluídas. %d comandos enviados.", comprasTentadas))
task.wait(2) -- Pausa antes da próxima seção

--[[----------------------------------------------------------
    SEÇÃO 2: DETECÇÃO E CÁLCULO DE FÁBRICAS NECESSÁRIAS
-------------------------------------------------------------]]
print("[Combo Final v4] Iniciando detecção e cálculo de fábricas...")
local metasFabricas = {
    ["Electronics Factory"] = 1, ["Steel Manufactory"] = 1, ["Motor Factory"] = 1,
    ["Fertilizer Factory"] = 1, ["Civilian Factory"] = 3,
}
local contagemAtualFabricas = {}
local fabricasParaConstruirRealmente = {}
local todasCidadesDaNacao = {}
local playerNationName = nil
local podeConstruir = false -- Flag para saber se a detecção foi bem sucedida

local detectSuccess, detectResult = pcall(function()
    -- Detecta nação
    playerNationName = localPlayer:GetAttribute("Country")
    if not playerNationName then error("Não foi possível detectar a nação (atributo 'Country' ausente ou nulo).") end

    -- Encontra pasta de cidades
    local PlayerNationCitiesFolder = CitiesFolder and CitiesFolder:FindFirstChild(playerNationName, 5) or nil
    if not PlayerNationCitiesFolder then error(string.format("Pasta de cidades para '%s' não encontrada.", playerNationName)) end

    -- Lista cidades
    for _, child in ipairs(PlayerNationCitiesFolder:GetChildren()) do table.insert(todasCidadesDaNacao, child) end
    if #todasCidadesDaNacao == 0 then error("Nenhuma cidade encontrada na pasta da nação.") end
    print(string.format("[Combo Final v4] Nação: '%s'. Cidades: %d. Verificando fábricas existentes...", playerNationName, #todasCidadesDaNacao))

    -- Conta fábricas existentes (com pcall interno por cidade)
    for _, cidadeObj in ipairs(todasCidadesDaNacao) do
        local scanCitySuccess, scanCityErr = pcall(function()
             -- !! SUPOSIÇÃO: Edifícios em "Buildings" ou filhos diretos !!
             local buildingsContainer = cidadeObj:FindFirstChild("Buildings") or cidadeObj
             if buildingsContainer then
                 for _, edificioObj in ipairs(buildingsContainer:GetChildren()) do
                     local nomeEdificio = edificioObj.Name
                     if metasFabricas[nomeEdificio] then
                         contagemAtualFabricas[nomeEdificio] = (contagemAtualFabricas[nomeEdificio] or 0) + 1
                     end
                 end
             end
        end)
        if not scanCitySuccess then warn(string.format("Erro ao escanear cidade %s: %s", cidadeObj.Name, scanCityErr)) end
    end
    print("[Combo Final v4] Contagem atual de fábricas:")
    for tipo, meta in pairs(metasFabricas) do print(string.format("  -> %s: %d / %d", tipo, contagemAtualFabricas[tipo] or 0, meta)) end

    -- Calcula necessárias
    print("[Combo Final v4] Calculando fábricas necessárias...")
    for tipoFabrica, metaContagem in pairs(metasFabricas) do
        local contagemAtual = contagemAtualFabricas[tipoFabrica] or 0
        local necessarioConstruir = metaContagem - contagemAtual
        if necessarioConstruir > 0 then
            print(string.format("  -> Necessário construir %d de '%s'", necessarioConstruir, tipoFabrica))
            for i = 1, necessarioConstruir do table.insert(fabricasParaConstruirRealmente, tipoFabrica) end
        end
    end
    podeConstruir = true -- Se chegou até aqui sem erro, a detecção/cálculo foi OK
end)

if not detectSuccess then
    warn("[Combo Final v4] Erro durante detecção/cálculo de fábricas:", detectResult)
    warn("[Combo Final v4] Seção de construção será pulada.")
end

--[[----------------------------------------------------------
    SEÇÃO 3: CONSTRUÇÃO DAS FÁBRICAS NECESSÁRIAS
-------------------------------------------------------------]]
-- Só executa se a detecção foi bem sucedida, se há fábricas a construir e se há cidades disponíveis
if podeConstruir and #fabricasParaConstruirRealmente > 0 and #todasCidadesDaNacao > 0 then
    print(string.format("[Combo Final v4] Iniciando construção de %d fábricas necessárias...", #fabricasParaConstruirRealmente))
    math.randomseed(os.time())
    local construcoesFeitas = 0

    for _, nomeFabrica in ipairs(fabricasParaConstruirRealmente) do
        -- Escolhe cidade aleatória
        local indiceAleatorio = math.random(1, #todasCidadesDaNacao)
        local cidadeAleatoriaObj = todasCidadesDaNacao[indiceAleatorio]

        if cidadeAleatoriaObj then
             print(string.format("  -> Construindo '%s' na cidade aleatória: %s", nomeFabrica, cidadeAleatoriaObj.Name))
             local args = {{cidadeAleatoriaObj}, nomeFabrica}
             if executarAcao(CreateBuildingRemote, args) then
                 construcoesFeitas = construcoesFeitas + 1
             end
             -- Opcional: remover cidade?
        else
             warn("[Combo Final v4] Erro ao selecionar cidade aleatória.")
        end
    end
    print(string.format("[Combo Final v4] Construção concluída. %d comandos enviados.", construcoesFeitas))

elseif podeConstruir then -- Se a detecção funcionou mas não precisa construir ou não tem cidades
     if #fabricasParaConstruirRealmente == 0 then
         print("[Combo Final v4] Nenhuma fábrica nova necessária. Metas atingidas.")
     else -- #todasCidadesDaNacao deve ser 0 (ou erro no pcall anterior)
         print("[Combo Final v4] Nenhuma cidade encontrada para construir as fábricas necessárias.")
     end
end
-- Se podeConstruir for false, o aviso de erro já foi dado na seção anterior.

print("[Combo Final v4] Script finalizado.")
-- Fim do Script
