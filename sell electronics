--[[
    Script de Venda de Eletrônicos Controlado por Toggle (_G) v1.1 - SEM LIMITE

    Objetivo: Quando executado, verifica a flag global _G.AutoVendaEletronicosAtivada.
              Se true, tenta vender "Electronics" (quantidade 5, preço 1) para TODAS
              as nações não-jogadoras listadas, sem um limite de quantidade total.
              Se false, encerra a execução imediatamente.

    Novidade v1.1: Removido o limite de venda total. Tenta vender para todos na lista.

    AVISO: Risco de banimento por automação.
]]

-- Verifica a Flag Global definida pelo Callback do Toggle
if not _G.AutoVendaEletronicosAtivada then
    print("[Venda Eletronicos SL] Toggle está DESATIVADO. Script não será executado.")
    return -- Encerra o script
end

print("[Venda Eletronicos SL] Toggle está ATIVADO. Iniciando ciclo de vendas SEM LIMITE...")

-- Serviços e Atalhos Principais
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

-- Tenta encontrar o GameManager e o RemoteEvent
local GameManager, ManageAllianceRemote
local setupOk = true

local successGM, gm = pcall(function() return Workspace:WaitForChild("GameManager", 5) end)
if successGM and gm then
    GameManager = gm
    local successRemote, remote = pcall(function() return GameManager:WaitForChild("ManageAlliance", 5) end)
    if successRemote and remote then
        ManageAllianceRemote = remote
    else
        warn("[Venda Eletronicos SL] ERRO: RemoteEvent 'ManageAlliance' não encontrado.")
        setupOk = false
    end
else
    warn("[Venda Eletronicos SL] ERRO: 'GameManager' não encontrado.")
    setupOk = false
end

if not setupOk then
    warn("[Venda Eletronicos SL] Falha no setup inicial. Abortando.")
    return
end

-- Função Auxiliar para Executar Ações (retorna sucesso do envio)
local function executarAcao(remoteEvent, arguments, delayTime)
    if not remoteEvent then warn("RemoteEvent inválido.") return false end
    local success, err = pcall(function() remoteEvent:FireServer(unpack(arguments)) end)
    if not success then warn(string.format("Erro ao executar ação: %s", tostring(err))) end
    task.wait(delayTime or 1)
    return success
end

-- ============================================
-- CONFIGURAÇÕES DA VENDA
-- ============================================
local RESOURCE_TO_SELL = "Electronics"
local QUANTITY_PER_SALE = 5
local PRICE_PER_UNIT = 1
local TRADE_ACTION = "Sell"
local TRADE_TYPE = "Trade"
-- local LIMITE_VENDA_TOTAL = 50 -- REMOVIDO

-- ===================================
-- LISTA DE PAÍSES (Verifique os nomes!)
-- ===================================
local vendasPotenciais = {
    { nation = "Japan" }, { nation = "Mexico" }, { nation = "India" }, { nation = "China" },
    { nation = "United States" }, { nation = "Bangladesh" }, { nation = "Argentina" }, { nation = "Pakistan" },
    { nation = "Egypt" }, { nation = "Russia" }, { nation = "Philippines" }, { nation = "Turkey" },
    { nation = "South Korea" }, { nation = "Nigeria" }, { nation = "Indonesia" }, { nation = "United Kingdom" },
    { nation = "Peru" }, { nation = "Iran" }, { nation = "Colombia" },
    { nation = "Democratic Republic of the Congo" },
    { nation = "Hong Kong" }, { nation = "Taiwan" }, { nation = "Thailand" },
    { nation = "Canada" }, { nation = "Vietnam" }, { nation = "Singapore" }, { nation = "Chile" },
    { nation = "Angola" }, { nation = "Iraq" }, { nation = "Burma" }, -- ou "Myanmar"
    { nation = "Saudi Arabia" }, { nation = "Australia" }, { nation = "Sudan" },
    { nation = "South Africa" }, { nation = "Cote d'Ivoire" }, { nation = "Germany" }, { nation = "Italy" },
}

-- ========================================================
-- LOOP PRINCIPAL DE VENDAS (SEM LIMITE)
-- ========================================================
print(string.format("[Venda Eletronicos SL] Iniciando ciclo de vendas de '%s'...", RESOURCE_TO_SELL))
-- local totalVendidoNestaExecucao = 0 -- REMOVIDO
local vendasPuladas = 0
local comandosEnviados = 0

-- Loop principal que tenta vender para cada país na lista
for i, vendaInfo in ipairs(vendasPotenciais) do
    -- Verificação de limite REMOVIDA

    local targetNationName = vendaInfo.nation
    local isPlayerControlled = false

    -- Verifica se é jogador
    local currentPlayers = Players:GetPlayers()
    for _, player in ipairs(currentPlayers) do
        if player ~= localPlayer then
            local success, playerNation = pcall(function() return player:GetAttribute("Country") end)
            if success and playerNation and playerNation == targetNationName then
                isPlayerControlled = true
                vendasPuladas = vendasPuladas + 1
                break
            end
        end
    end

    -- Se não for jogador, tenta vender
    if not isPlayerControlled then
        local args = {
            targetNationName, "ResourceTrade",
            { RESOURCE_TO_SELL, TRADE_ACTION, QUANTITY_PER_SALE, PRICE_PER_UNIT, TRADE_TYPE }
        }

        -- Tenta executar e conta o comando enviado se o envio foi bem-sucedido
        if executarAcao(ManageAllianceRemote, args) then
            comandosEnviados = comandosEnviados + 1
            -- Linha que incrementava totalVendidoNestaExecucao REMOVIDA
            print(string.format("  -> Venda de %d %s para %s enviada.", QUANTITY_PER_SALE, RESOURCE_TO_SELL, targetNationName))
        else
             print(string.format("  -> FALHA ao enviar comando de venda para %s.", targetNationName))
        end
    end
end -- Fim do loop for ipairs(vendasPotenciais)

print(string.format("[Venda Eletronicos SL] Ciclo de vendas concluído. Comandos enviados: %d. Vendas puladas (players): %d.", comandosEnviados, vendasPuladas))
-- Fim do Script Baixado
